package com.github.kolandroid.kol.android.controllers.fight;

import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;

import androidx.viewpager.widget.ViewPager;

import com.github.kolandroid.kol.android.R;
import com.github.kolandroid.kol.android.binders.DefaultGroupBinder;
import com.github.kolandroid.kol.android.binders.ElementBinder;
import com.github.kolandroid.kol.android.binders.SubtextBinder;
import com.github.kolandroid.kol.android.controller.Controller;
import com.github.kolandroid.kol.android.controller.ModelController;
import com.github.kolandroid.kol.android.controllers.web.WebController;
import com.github.kolandroid.kol.android.screen.DialogScreen;
import com.github.kolandroid.kol.android.screen.Screen;
import com.github.kolandroid.kol.android.screen.ScreenSelection;
import com.github.kolandroid.kol.android.screen.ViewScreen;
import com.github.kolandroid.kol.android.util.searchlist.GroupSearchListController;
import com.github.kolandroid.kol.android.util.searchlist.ListSelector;
import com.github.kolandroid.kol.android.util.searchlist.SerializableSelector;
import com.github.kolandroid.kol.model.elements.ActionElement;
import com.github.kolandroid.kol.model.elements.interfaces.ModelGroup;
import com.github.kolandroid.kol.model.models.fight.FightAction;
import com.github.kolandroid.kol.model.models.fight.FightItem;
import com.github.kolandroid.kol.model.models.fight.FightModel;
import com.github.kolandroid.kol.util.Callback;
import com.github.kolandroid.kol.util.Logger;
import com.github.kolandroid.kol.util.SerializableCallback;

import java.lang.ref.WeakReference;
import java.util.ArrayList;

public class FightController extends ModelController<FightModel> {
    /**
     * Autogenerated by eclipse.
     */
    private static final long serialVersionUID = -7848760148015474401L;
    private static ListSelector<FightAction> actionSelector = new SerializableSelector<FightAction>() {
        @Override
        public boolean selectItem(Screen host, FightAction action) {
            action.attachView(host.getViewContext());
            action.use();
            return true;
        }
    };
    private final Controller actionBar;
    private final Controller mainPane;

    private transient WeakReference<Screen> host;
    private transient FightItem funkslingingFirstSelectedItem;

    // Callback for an item selected in the Combat Action Bar
    private final Callback<FightAction> notifyActionSelection = new SerializableCallback<FightAction>() {
        @Override
        public void execute(FightAction action) {
            Logger.log("FightController", "Executing " + action + " from action bar");

            if (host == null) return;
            Screen fullHost = host.get();
            if (fullHost == null) return;

            if (getModel().hasFunkslinging() && action instanceof FightItem) {
                if (funkslingingFirstSelectedItem == null) {
                    // Select the first item to funksling
                    funkslingingFirstSelectedItem = (FightItem) action;
                } else {
                    funkslingingFirstSelectedItem.attachView(fullHost.getViewContext());
                    action.attachView(fullHost.getViewContext());
                    // Two items have been selected to funksling; use them
                    FightItem.funksling(funkslingingFirstSelectedItem, (FightItem) action);
                }
            } else {
                // No funkslinging or not an item; just use it as normal
                action.attachView(fullHost.getViewContext());
                action.use();
            }
        }
    };

    public FightController(FightModel model) {
        super(model);

        if (model.getActionBar() != null) {
            this.actionBar = new FightActionBarController(model.getActionBar(), notifyActionSelection);
        } else {
            this.actionBar = null;
        }
        this.mainPane = new WebController(model);
    }

    @Override
    public int getView() {
        return R.layout.fight_view;
    }

    @Override
    public void chooseScreen(ScreenSelection choice) {
        choice.displayPrimary(this);
    }

    @Override
    public void connect(View view, Screen host) {
        if (actionBar != null) {
            ViewPager actionBarView = (ViewPager) view.findViewById(R.id.fight_actionbar);
            actionBar.connect(actionBarView, host);
        }
    }

    @Override
    public void disconnect(Screen host) {
        if (actionBar != null) {
            actionBar.disconnect(host);
        }
    }

    @Override
    public void attach(View view, final FightModel model, final Screen host) {
        this.host = new WeakReference<Screen>(host);

        final Button attack = (Button) view.findViewById(R.id.fight_attack);
        attack.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View arg0) {
                ActionElement action = model.getAttack();
                if (action != null)
                    action.submit(host.getViewContext());
            }
        });

        final Button useSkill = (Button) view.findViewById(R.id.fight_skill);
        useSkill.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View btn) {
                ArrayList<ModelGroup<FightAction>> skills = model.getSkills();
                Controller skillsController = new GroupSearchListController<>(skills, DefaultGroupBinder.ONLY, SubtextBinder.ONLY, actionSelector);
                DialogScreen.display(skillsController, host,
                        "Choose a skill to use:");
            }
        });

        final Button useItem = (Button) view.findViewById(R.id.fight_items);
        useItem.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View btn) {
                ArrayList<ModelGroup<FightItem>> items = model.getItems();

                if (getModel().hasFunkslinging()) {
                    Controller itemsController;
                    if (funkslingingFirstSelectedItem == null) {
                        itemsController = new FunkslingingController(items);
                    } else {
                        itemsController = new FunkslingingController(items, funkslingingFirstSelectedItem);
                    }
                    DialogScreen.display(itemsController, host, "Select items to use:");
                } else {
                    Controller itemsController = new GroupSearchListController<>(items, DefaultGroupBinder.ONLY, ElementBinder.ONLY, actionSelector);
                    DialogScreen.display(itemsController, host, "Select item to use:");
                }
            }
        });

        ViewScreen webScreen = (ViewScreen) view
                .findViewById(R.id.fight_web_screen);
        webScreen.display(mainPane, host);

        if (model.isFightOver()) {
            //Hide the two views
            view.findViewById(R.id.fight_button_bar).setVisibility(View.GONE);
            view.findViewById(R.id.fight_actionbar).setVisibility(View.GONE);

            if (model.getNextAdventure() != null) {
                Button repeat = (Button) view.findViewById(R.id.fight_adventure_again);
                repeat.setText(model.getNextAdventure().getText());
                repeat.setVisibility(View.VISIBLE);
                repeat.setOnClickListener(new OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        getModel().getNextAdventure().submit(host.getViewContext());
                    }
                });
            }
        } else if (actionBar == null) {
            //Hide only the action bar
            view.findViewById(R.id.fight_actionbar).setVisibility(View.GONE);
        } else {
            ViewPager actionBarView = (ViewPager) view.findViewById(R.id.fight_actionbar);
            actionBar.attach(actionBarView, host);
        }
    }

}
